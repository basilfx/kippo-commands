*** honeypot.py.orig	2012-11-08 13:35:26.000000000 +0100
--- honeypot.py	2012-11-06 21:55:24.000000000 +0100
***************
*** 21,29 ****
  import ConfigParser
  
  class HoneyPotCommand(object):
!     def __init__(self, honeypot, *args):
          self.honeypot = honeypot
          self.args = args
          self.writeln = self.honeypot.writeln
          self.write = self.honeypot.terminal.write
          self.nextLine = self.honeypot.terminal.nextLine
--- 21,30 ----
  import ConfigParser
  
  class HoneyPotCommand(object):
!     def __init__(self, honeypot, *args, **env):
          self.honeypot = honeypot
          self.args = args
+         self.env = env
          self.writeln = self.honeypot.writeln
          self.write = self.honeypot.terminal.write
          self.nextLine = self.honeypot.terminal.nextLine
***************
*** 123,129 ****
          if cmdclass:
              print 'Command found: %s' % (line,)
              self.honeypot.logDispatch('Command found: %s' % (line,))
!             self.honeypot.call_command(cmdclass, *rargs)
          else:
              self.honeypot.logDispatch('Command not found: %s' % (line,))
              print 'Command not found: %s' % (line,)
--- 124,134 ----
          if cmdclass:
              print 'Command found: %s' % (line,)
              self.honeypot.logDispatch('Command found: %s' % (line,))
! 
!             if getattr(cmdclass, 'resolve_args', False):
!                 self.honeypot.call_command(cmdclass, *rargs, **envvars)
!             else:
!                 self.honeypot.call_command(cmdclass, *args, **envvars)
          else:
              self.honeypot.logDispatch('Command not found: %s' % (line,))
              print 'Command not found: %s' % (line,)
***************
*** 353,360 ****
          self.terminal.write(data)
          self.terminal.nextLine()
  
!     def call_command(self, cmd, *args):
!         obj = cmd(self, *args)
          self.cmdstack.append(obj)
          self.setTypeoverMode()
          obj.start()
--- 358,365 ----
          self.terminal.write(data)
          self.terminal.nextLine()
  
!     def call_command(self, cmd, *args, **env):
!         obj = cmd(self, *args, **env)
          self.cmdstack.append(obj)
          self.setTypeoverMode()
          obj.start()
***************
*** 704,707 ****
          privateKeyString = file(private_key).read()
      return publicKeyString, privateKeyString
  
! # vim: set sw=4 et:
\ No newline at end of file
--- 709,712 ----
          privateKeyString = file(private_key).read()
      return publicKeyString, privateKeyString
  
! # vim: set sw=4 et:
